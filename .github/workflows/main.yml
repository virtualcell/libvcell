name: Main

on:
  push:
    branches:
      - main
  pull_request:
    types: [ opened, synchronize, reopened, ready_for_review ]

jobs:
  quality:
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v4

      - uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Set up the environment
        uses: ./.github/actions/setup-poetry-env

      - name: Run checks
        run: make check

  tests-and-type-check:
    runs-on: ubuntu-latest
    strategy:
      matrix: #        python-version: ["3.9", "3.10", "3.11", "3.12"]
        python-version: [ "3.11", "3.12" ]
        #        os: [macos-13, windows-latest, ubuntu-latest, macos-14]
        os: [ windows-latest, ubuntu-latest, macos-14 ]
      fail-fast: false
    defaults:
      run:
        shell: bash
    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Set up the environment
        uses: ./.github/actions/setup-poetry-env
        with:
          python-version: ${{ matrix.python-version }}

      - name: setup graalvm for static native build
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '23'
          distribution: 'graalvm-community'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          components: 'native-image'
          #          native-image-musl: 'true' # Now semi-static by not including libc
          native-image-job-reports: 'true'
          cache: 'maven'

      - name: build entire project
        run: |
          pushd vcell
          mvn --batch-mode clean install dependency:copy-dependencies -DskipTests=true
          popd

      - name: test, record, and build/install native library
        run: |
          pushd vcell-native
          mvn --batch-mode test

          java -Dheadless=true -agentlib:native-image-agent=config-output-dir=target/recording \
          -jar target/vcell-nativelib-0.0.1-SNAPSHOT.jar \
          "src/test/resources/TinySpacialProject_Application0.xml" \
          "target/sbml-input"

          mvn --batch-mode -P shared-dll -DskipTests=true package
          cp target/libvcell.{so,dylib} ../libvcell/_internal/libs
          popd
        if: matrix.os != 'windows-latest'

      - name: test, record, and build/install native library
        run: |
          pushd vcell-native
          mvn --batch-mode test

          java -Dheadless=true -agentlib:native-image-agent=config-output-dir=target\recording -jar target\vcell-nativelib-0.0.1-SNAPSHOT.jar "src\test\resources\TinySpacialProject_Application0.xml" "target\sbml-input"

          mvn --batch-mode -P shared-dll -DskipTests=true package
          cp target/libvcell.{dll} ../libvcell/_internal/libs
          popd
        if: matrix.os == 'windows-latest'

      - name: Run tests
        run: poetry run pytest tests --cov --cov-config=pyproject.toml --cov-report=xml

      - name: Check typing
        run: poetry run mypy

      - name: Upload coverage reports to Codecov with GitHub Action on Python 3.11
        uses: codecov/codecov-action@v4
        if: ${{ matrix.python-version == '3.11' }}

  check-docs:
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Set up the environment
        uses: ./.github/actions/setup-poetry-env

      - name: Check if documentation can be built
        run: poetry run mkdocs build -s
