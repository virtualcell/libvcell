name: release-main

on:
  workflow_dispatch:
  release:
    types: [published]
    branches: [main]

jobs:
  build:
    strategy:
      matrix:
        #        python-version: ["3.9", "3.10", "3.11", "3.12"]
        python-version: ["3.11", "3.12"]
        #        os: [macos-13, windows-latest, ubuntu-latest, macos-14]
        os: [ubuntu-latest, macos-14]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash

    steps:
      - name: Check out
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 2


      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - uses: abatilo/actions-poetry@v3

      - name: setup graalvm for static native build
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: "23"
          distribution: "graalvm-community"
          github-token: ${{ secrets.GITHUB_TOKEN }}
          components: "native-image"
          #          native-image-musl: 'true' # Now semi-static by not including libc
          native-image-job-reports: "true"
          cache: "maven"

      - name: build VCell Java project from submodule
        working-directory: vcell_submodule
        run: |
          mvn --batch-mode clean install dependency:copy-dependencies -DskipTests=true

      - name: test, record, and build/install native library (ubuntu or macos)
        working-directory: vcell-native
        run: |
          mvn --batch-mode clean install

          java -agentlib:native-image-agent=config-output-dir=target/recording \
               -jar target/vcell-native-1.0-SNAPSHOT.jar \
               "src/test/resources/TinySpacialProject_Application0.xml" \
               "target/sbml-input"

          mvn --batch-mode -P shared-dll package
          mkdir -p ../libvcell/lib
          cp target/libvcell.so ../libvcell/lib || true
          cp target/libvcell.dylib ../libvcell/lib || true
        if: ${{ startsWith(matrix.os, 'ubuntu') || startsWith(matrix.os, 'macos') }}

      - name: test, record, and build/install native library (windows)
        working-directory: vcell-native
        run: |
          mvn --batch-mode clean install

          java -agentlib:native-image-agent=config-output-dir=target\recording -jar "target\vcell-native-1.0-SNAPSHOT.jar" "src\test\resources\TinySpacialProject_Application0.xml" "target\sbml-input"

          mvn --batch-mode -P shared-dll package
          mkdir -p ../libvcell/lib
          cp target/libvcell.dll ../libvcell/lib
        if: ${{ startsWith(matrix.os, 'windows') }}

      - name: Install python dependencies
        run: poetry install --no-interaction

      - name: Run tests
        run: poetry run pytest tests

      - name: Export tag
        id: vars
        run: echo tag=${GITHUB_REF#refs/*/} >> $GITHUB_OUTPUT

      - name: List contents of vcell-native/target/libvcell.*
        run: ls -l vcell-native/target/libvcell.*

      - name: Build wheels
        run: |
          pip install cibuildwheel
          CIBW_BUILD_VERBOSITY=1 CIBW_BEFORE_BUILD="mkdir -p libvcell/lib && cp vcell-native/target/libvcell.* libvcell/lib/" cibuildwheel --output-dir wheelhouse

      - name: Upload wheels as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels
          path: wheelhouse/*.whl

      - name: Setup tmate
        if: failure()
        uses: mxschmitt/action-tmate@v3
        with:
          limit-access-to-actor: true

  publish:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          name: wheels
          path: wheelhouse

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@v1.8.6
        with:
          password: ${{ secrets.PYPI_TOKEN }}
          packages_dir: wheelhouse

  deploy-docs:
    needs: publish
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Set up the environment
        uses: ./.github/actions/setup-poetry-env

      - name: Deploy documentation
        run: poetry run mkdocs gh-deploy --force
