{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"libvcell","text":"<p>This is a python package which wraps a subset of VCell Java code as a native python package.</p>"},{"location":"modules/","title":"Modules","text":""},{"location":"modules/#libvcell_1","title":"libvcell","text":""},{"location":"modules/#libvcell.sbml_to_finite_volume_input","title":"<code>sbml_to_finite_volume_input(sbml_content, output_dir_path)</code>","text":"<p>Convert SBML content to finite volume input files</p> <p>Parameters:</p> Name Type Description Default <code>sbml_content</code> <code>str</code> <p>SBML content</p> required <code>output_dir_path</code> <code>Path</code> <p>output directory path</p> required <p>Returns:</p> Type Description <code>tuple[bool, str]</code> <p>tuple[bool, str]: A tuple containing the success status and a message</p> Source code in <code>libvcell/solver_utils.py</code> <pre><code>def sbml_to_finite_volume_input(sbml_content: str, output_dir_path: Path) -&gt; tuple[bool, str]:\n    \"\"\"\n    Convert SBML content to finite volume input files\n\n    Args:\n        sbml_content (str): SBML content\n        output_dir_path (Path): output directory path\n\n    Returns:\n        tuple[bool, str]: A tuple containing the success status and a message\n    \"\"\"\n    native = VCellNativeCalls()\n    return_value: ReturnValue = native.sbml_to_finite_volume_input(sbml_content, output_dir_path)\n    return return_value.success, return_value.message\n</code></pre>"},{"location":"modules/#libvcell.sbml_to_vcml","title":"<code>sbml_to_vcml(sbml_content, vcml_file_path)</code>","text":"<p>Convert SBML content to finite volume input files</p> <p>Parameters:</p> Name Type Description Default <code>sbml_content</code> <code>str</code> <p>SBML content</p> required <code>vcml_file_path</code> <code>Path</code> <p>path to resulting VCML file</p> required <p>Returns:</p> Type Description <code>tuple[bool, str]</code> <p>tuple[bool, str]: A tuple containing the success status and a message</p> Source code in <code>libvcell/model_utils.py</code> <pre><code>def sbml_to_vcml(sbml_content: str, vcml_file_path: Path) -&gt; tuple[bool, str]:\n    \"\"\"\n    Convert SBML content to finite volume input files\n\n    Args:\n        sbml_content (str): SBML content\n        vcml_file_path (Path): path to resulting VCML file\n\n    Returns:\n        tuple[bool, str]: A tuple containing the success status and a message\n    \"\"\"\n    native = VCellNativeCalls()\n    return_value: ReturnValue = native.sbml_to_vcml(sbml_content=sbml_content, vcml_file_path=vcml_file_path)\n    return return_value.success, return_value.message\n</code></pre>"},{"location":"modules/#libvcell.vcml_to_finite_volume_input","title":"<code>vcml_to_finite_volume_input(vcml_content, simulation_name, output_dir_path)</code>","text":"<p>Convert VCML content to finite volume input files</p> <p>Parameters:</p> Name Type Description Default <code>vcml_content</code> <code>str</code> <p>VCML content</p> required <code>simulation_name</code> <code>str</code> <p>simulation name</p> required <code>output_dir_path</code> <code>Path</code> <p>output directory path</p> required <p>Returns:</p> Type Description <code>tuple[bool, str]</code> <p>tuple[bool, str]: A tuple containing the success status and a message</p> Source code in <code>libvcell/solver_utils.py</code> <pre><code>def vcml_to_finite_volume_input(vcml_content: str, simulation_name: str, output_dir_path: Path) -&gt; tuple[bool, str]:\n    \"\"\"\n    Convert VCML content to finite volume input files\n\n    Args:\n        vcml_content (str): VCML content\n        simulation_name (str): simulation name\n        output_dir_path (Path): output directory path\n\n    Returns:\n        tuple[bool, str]: A tuple containing the success status and a message\n    \"\"\"\n    native = VCellNativeCalls()\n    return_value: ReturnValue = native.vcml_to_finite_volume_input(vcml_content, simulation_name, output_dir_path)\n    return return_value.success, return_value.message\n</code></pre>"},{"location":"modules/#libvcell.vcml_to_sbml","title":"<code>vcml_to_sbml(vcml_content, application_name, sbml_file_path, round_trip_validation)</code>","text":"<p>Convert VCML content to SBML file</p> <p>Parameters:</p> Name Type Description Default <code>vcml_content</code> <code>str</code> <p>VCML content</p> required <code>application_name</code> <code>str</code> <p>VCell Biomodel application name</p> required <code>sbml_file_path</code> <code>Path</code> <p>path to resulting SBML file</p> required <p>Returns:</p> Type Description <code>tuple[bool, str]</code> <p>tuple[bool, str]: A tuple containing the success status and a message</p> Source code in <code>libvcell/model_utils.py</code> <pre><code>def vcml_to_sbml(\n    vcml_content: str, application_name: str, sbml_file_path: Path, round_trip_validation: bool\n) -&gt; tuple[bool, str]:\n    \"\"\"\n    Convert VCML content to SBML file\n\n    Args:\n        vcml_content (str): VCML content\n        application_name (str): VCell Biomodel application name\n        sbml_file_path (Path): path to resulting SBML file\n\n    Returns:\n        tuple[bool, str]: A tuple containing the success status and a message\n    \"\"\"\n    native = VCellNativeCalls()\n    return_value: ReturnValue = native.vcml_to_sbml(\n        vcml_content=vcml_content,\n        application_name=application_name,\n        sbml_file_path=sbml_file_path,\n        round_trip_validation=round_trip_validation,\n    )\n    return return_value.success, return_value.message\n</code></pre>"},{"location":"modules/#libvcell.vcml_to_vcml","title":"<code>vcml_to_vcml(vcml_content, vcml_file_path)</code>","text":"<p>Process VCML content to regenerated VCML file</p> <p>Parameters:</p> Name Type Description Default <code>vcml_content</code> <code>str</code> <p>VCML content</p> required <code>vcml_file_path</code> <code>Path</code> <p>path to resulting VCML file</p> required <p>Returns:</p> Type Description <code>tuple[bool, str]</code> <p>tuple[bool, str]: A tuple containing the success status and a message</p> Source code in <code>libvcell/model_utils.py</code> <pre><code>def vcml_to_vcml(vcml_content: str, vcml_file_path: Path) -&gt; tuple[bool, str]:\n    \"\"\"\n    Process VCML content to regenerated VCML file\n\n    Args:\n        vcml_content (str): VCML content\n        vcml_file_path (Path): path to resulting VCML file\n\n    Returns:\n        tuple[bool, str]: A tuple containing the success status and a message\n    \"\"\"\n    native = VCellNativeCalls()\n    return_value: ReturnValue = native.vcml_to_vcml(vcml_content=vcml_content, vcml_file_path=vcml_file_path)\n    return return_value.success, return_value.message\n</code></pre>"},{"location":"modules/#modules_1","title":"Modules","text":""},{"location":"modules/#libvcell_2","title":"libvcell","text":""},{"location":"modules/#libvcell.sbml_to_finite_volume_input","title":"<code>sbml_to_finite_volume_input(sbml_content, output_dir_path)</code>","text":"<p>Convert SBML content to finite volume input files</p> <p>Parameters:</p> Name Type Description Default <code>sbml_content</code> <code>str</code> <p>SBML content</p> required <code>output_dir_path</code> <code>Path</code> <p>output directory path</p> required <p>Returns:</p> Type Description <code>tuple[bool, str]</code> <p>tuple[bool, str]: A tuple containing the success status and a message</p> Source code in <code>libvcell/solver_utils.py</code> <pre><code>def sbml_to_finite_volume_input(sbml_content: str, output_dir_path: Path) -&gt; tuple[bool, str]:\n    \"\"\"\n    Convert SBML content to finite volume input files\n\n    Args:\n        sbml_content (str): SBML content\n        output_dir_path (Path): output directory path\n\n    Returns:\n        tuple[bool, str]: A tuple containing the success status and a message\n    \"\"\"\n    native = VCellNativeCalls()\n    return_value: ReturnValue = native.sbml_to_finite_volume_input(sbml_content, output_dir_path)\n    return return_value.success, return_value.message\n</code></pre>"},{"location":"modules/#libvcell.sbml_to_vcml","title":"<code>sbml_to_vcml(sbml_content, vcml_file_path)</code>","text":"<p>Convert SBML content to finite volume input files</p> <p>Parameters:</p> Name Type Description Default <code>sbml_content</code> <code>str</code> <p>SBML content</p> required <code>vcml_file_path</code> <code>Path</code> <p>path to resulting VCML file</p> required <p>Returns:</p> Type Description <code>tuple[bool, str]</code> <p>tuple[bool, str]: A tuple containing the success status and a message</p> Source code in <code>libvcell/model_utils.py</code> <pre><code>def sbml_to_vcml(sbml_content: str, vcml_file_path: Path) -&gt; tuple[bool, str]:\n    \"\"\"\n    Convert SBML content to finite volume input files\n\n    Args:\n        sbml_content (str): SBML content\n        vcml_file_path (Path): path to resulting VCML file\n\n    Returns:\n        tuple[bool, str]: A tuple containing the success status and a message\n    \"\"\"\n    native = VCellNativeCalls()\n    return_value: ReturnValue = native.sbml_to_vcml(sbml_content=sbml_content, vcml_file_path=vcml_file_path)\n    return return_value.success, return_value.message\n</code></pre>"},{"location":"modules/#libvcell.vcml_to_finite_volume_input","title":"<code>vcml_to_finite_volume_input(vcml_content, simulation_name, output_dir_path)</code>","text":"<p>Convert VCML content to finite volume input files</p> <p>Parameters:</p> Name Type Description Default <code>vcml_content</code> <code>str</code> <p>VCML content</p> required <code>simulation_name</code> <code>str</code> <p>simulation name</p> required <code>output_dir_path</code> <code>Path</code> <p>output directory path</p> required <p>Returns:</p> Type Description <code>tuple[bool, str]</code> <p>tuple[bool, str]: A tuple containing the success status and a message</p> Source code in <code>libvcell/solver_utils.py</code> <pre><code>def vcml_to_finite_volume_input(vcml_content: str, simulation_name: str, output_dir_path: Path) -&gt; tuple[bool, str]:\n    \"\"\"\n    Convert VCML content to finite volume input files\n\n    Args:\n        vcml_content (str): VCML content\n        simulation_name (str): simulation name\n        output_dir_path (Path): output directory path\n\n    Returns:\n        tuple[bool, str]: A tuple containing the success status and a message\n    \"\"\"\n    native = VCellNativeCalls()\n    return_value: ReturnValue = native.vcml_to_finite_volume_input(vcml_content, simulation_name, output_dir_path)\n    return return_value.success, return_value.message\n</code></pre>"},{"location":"modules/#libvcell.vcml_to_sbml","title":"<code>vcml_to_sbml(vcml_content, application_name, sbml_file_path, round_trip_validation)</code>","text":"<p>Convert VCML content to SBML file</p> <p>Parameters:</p> Name Type Description Default <code>vcml_content</code> <code>str</code> <p>VCML content</p> required <code>application_name</code> <code>str</code> <p>VCell Biomodel application name</p> required <code>sbml_file_path</code> <code>Path</code> <p>path to resulting SBML file</p> required <p>Returns:</p> Type Description <code>tuple[bool, str]</code> <p>tuple[bool, str]: A tuple containing the success status and a message</p> Source code in <code>libvcell/model_utils.py</code> <pre><code>def vcml_to_sbml(\n    vcml_content: str, application_name: str, sbml_file_path: Path, round_trip_validation: bool\n) -&gt; tuple[bool, str]:\n    \"\"\"\n    Convert VCML content to SBML file\n\n    Args:\n        vcml_content (str): VCML content\n        application_name (str): VCell Biomodel application name\n        sbml_file_path (Path): path to resulting SBML file\n\n    Returns:\n        tuple[bool, str]: A tuple containing the success status and a message\n    \"\"\"\n    native = VCellNativeCalls()\n    return_value: ReturnValue = native.vcml_to_sbml(\n        vcml_content=vcml_content,\n        application_name=application_name,\n        sbml_file_path=sbml_file_path,\n        round_trip_validation=round_trip_validation,\n    )\n    return return_value.success, return_value.message\n</code></pre>"},{"location":"modules/#libvcell.vcml_to_vcml","title":"<code>vcml_to_vcml(vcml_content, vcml_file_path)</code>","text":"<p>Process VCML content to regenerated VCML file</p> <p>Parameters:</p> Name Type Description Default <code>vcml_content</code> <code>str</code> <p>VCML content</p> required <code>vcml_file_path</code> <code>Path</code> <p>path to resulting VCML file</p> required <p>Returns:</p> Type Description <code>tuple[bool, str]</code> <p>tuple[bool, str]: A tuple containing the success status and a message</p> Source code in <code>libvcell/model_utils.py</code> <pre><code>def vcml_to_vcml(vcml_content: str, vcml_file_path: Path) -&gt; tuple[bool, str]:\n    \"\"\"\n    Process VCML content to regenerated VCML file\n\n    Args:\n        vcml_content (str): VCML content\n        vcml_file_path (Path): path to resulting VCML file\n\n    Returns:\n        tuple[bool, str]: A tuple containing the success status and a message\n    \"\"\"\n    native = VCellNativeCalls()\n    return_value: ReturnValue = native.vcml_to_vcml(vcml_content=vcml_content, vcml_file_path=vcml_file_path)\n    return return_value.success, return_value.message\n</code></pre>"},{"location":"modules/#functions","title":"Functions","text":""},{"location":"modules/#sbml_to_finite_volume_input","title":"sbml_to_finite_volume_input","text":"<p>Convert SBML content to finite volume input files</p> <p>Parameters:</p> Name Type Description Default <code>sbml_content</code> <code>str</code> <p>SBML content</p> required <code>output_dir_path</code> <code>Path</code> <p>output directory path</p> required <p>Returns:</p> Type Description <code>tuple[bool, str]</code> <p>tuple[bool, str]: A tuple containing the success status and a message</p> Source code in <code>libvcell/solver_utils.py</code> <pre><code>def sbml_to_finite_volume_input(sbml_content: str, output_dir_path: Path) -&gt; tuple[bool, str]:\n    \"\"\"\n    Convert SBML content to finite volume input files\n\n    Args:\n        sbml_content (str): SBML content\n        output_dir_path (Path): output directory path\n\n    Returns:\n        tuple[bool, str]: A tuple containing the success status and a message\n    \"\"\"\n    native = VCellNativeCalls()\n    return_value: ReturnValue = native.sbml_to_finite_volume_input(sbml_content, output_dir_path)\n    return return_value.success, return_value.message\n</code></pre>"},{"location":"modules/#vcml_to_finite_volume_input","title":"vcml_to_finite_volume_input","text":"<p>Convert VCML content to finite volume input files</p> <p>Parameters:</p> Name Type Description Default <code>vcml_content</code> <code>str</code> <p>VCML content</p> required <code>simulation_name</code> <code>str</code> <p>simulation name</p> required <code>output_dir_path</code> <code>Path</code> <p>output directory path</p> required <p>Returns:</p> Type Description <code>tuple[bool, str]</code> <p>tuple[bool, str]: A tuple containing the success status and a message</p> Source code in <code>libvcell/solver_utils.py</code> <pre><code>def vcml_to_finite_volume_input(vcml_content: str, simulation_name: str, output_dir_path: Path) -&gt; tuple[bool, str]:\n    \"\"\"\n    Convert VCML content to finite volume input files\n\n    Args:\n        vcml_content (str): VCML content\n        simulation_name (str): simulation name\n        output_dir_path (Path): output directory path\n\n    Returns:\n        tuple[bool, str]: A tuple containing the success status and a message\n    \"\"\"\n    native = VCellNativeCalls()\n    return_value: ReturnValue = native.vcml_to_finite_volume_input(vcml_content, simulation_name, output_dir_path)\n    return return_value.success, return_value.message\n</code></pre>"}]}